// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsageStat is an object representing the database table.
type UsageStat struct {
	UserID       string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	MetricName   string    `boil:"metric_name" json:"metric_name" toml:"metric_name" yaml:"metric_name"`
	CurrentValue int       `boil:"current_value" json:"current_value" toml:"current_value" yaml:"current_value"`
	PeriodStart  time.Time `boil:"period_start" json:"period_start" toml:"period_start" yaml:"period_start"`
	PeriodEnd    null.Time `boil:"period_end" json:"period_end,omitempty" toml:"period_end" yaml:"period_end,omitempty"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *usageStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usageStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsageStatColumns = struct {
	UserID       string
	MetricName   string
	CurrentValue string
	PeriodStart  string
	PeriodEnd    string
	UpdatedAt    string
}{
	UserID:       "user_id",
	MetricName:   "metric_name",
	CurrentValue: "current_value",
	PeriodStart:  "period_start",
	PeriodEnd:    "period_end",
	UpdatedAt:    "updated_at",
}

var UsageStatTableColumns = struct {
	UserID       string
	MetricName   string
	CurrentValue string
	PeriodStart  string
	PeriodEnd    string
	UpdatedAt    string
}{
	UserID:       "usage_stats.user_id",
	MetricName:   "usage_stats.metric_name",
	CurrentValue: "usage_stats.current_value",
	PeriodStart:  "usage_stats.period_start",
	PeriodEnd:    "usage_stats.period_end",
	UpdatedAt:    "usage_stats.updated_at",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var UsageStatWhere = struct {
	UserID       whereHelperstring
	MetricName   whereHelperstring
	CurrentValue whereHelperint
	PeriodStart  whereHelpertime_Time
	PeriodEnd    whereHelpernull_Time
	UpdatedAt    whereHelpertime_Time
}{
	UserID:       whereHelperstring{field: "\"usage_stats\".\"user_id\""},
	MetricName:   whereHelperstring{field: "\"usage_stats\".\"metric_name\""},
	CurrentValue: whereHelperint{field: "\"usage_stats\".\"current_value\""},
	PeriodStart:  whereHelpertime_Time{field: "\"usage_stats\".\"period_start\""},
	PeriodEnd:    whereHelpernull_Time{field: "\"usage_stats\".\"period_end\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"usage_stats\".\"updated_at\""},
}

// UsageStatRels is where relationship names are stored.
var UsageStatRels = struct {
}{}

// usageStatR is where relationships are stored.
type usageStatR struct {
}

// NewStruct creates a new relationship struct
func (*usageStatR) NewStruct() *usageStatR {
	return &usageStatR{}
}

// usageStatL is where Load methods for each relationship are stored.
type usageStatL struct{}

var (
	usageStatAllColumns            = []string{"user_id", "metric_name", "current_value", "period_start", "period_end", "updated_at"}
	usageStatColumnsWithoutDefault = []string{"user_id", "metric_name", "period_start"}
	usageStatColumnsWithDefault    = []string{"current_value", "period_end", "updated_at"}
	usageStatPrimaryKeyColumns     = []string{"user_id", "metric_name", "period_start"}
	usageStatGeneratedColumns      = []string{}
)

type (
	// UsageStatSlice is an alias for a slice of pointers to UsageStat.
	// This should almost always be used instead of []UsageStat.
	UsageStatSlice []*UsageStat
	// UsageStatHook is the signature for custom UsageStat hook methods
	UsageStatHook func(context.Context, boil.ContextExecutor, *UsageStat) error

	usageStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usageStatType                 = reflect.TypeOf(&UsageStat{})
	usageStatMapping              = queries.MakeStructMapping(usageStatType)
	usageStatPrimaryKeyMapping, _ = queries.BindMapping(usageStatType, usageStatMapping, usageStatPrimaryKeyColumns)
	usageStatInsertCacheMut       sync.RWMutex
	usageStatInsertCache          = make(map[string]insertCache)
	usageStatUpdateCacheMut       sync.RWMutex
	usageStatUpdateCache          = make(map[string]updateCache)
	usageStatUpsertCacheMut       sync.RWMutex
	usageStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usageStatAfterSelectMu sync.Mutex
var usageStatAfterSelectHooks []UsageStatHook

var usageStatBeforeInsertMu sync.Mutex
var usageStatBeforeInsertHooks []UsageStatHook
var usageStatAfterInsertMu sync.Mutex
var usageStatAfterInsertHooks []UsageStatHook

var usageStatBeforeUpdateMu sync.Mutex
var usageStatBeforeUpdateHooks []UsageStatHook
var usageStatAfterUpdateMu sync.Mutex
var usageStatAfterUpdateHooks []UsageStatHook

var usageStatBeforeDeleteMu sync.Mutex
var usageStatBeforeDeleteHooks []UsageStatHook
var usageStatAfterDeleteMu sync.Mutex
var usageStatAfterDeleteHooks []UsageStatHook

var usageStatBeforeUpsertMu sync.Mutex
var usageStatBeforeUpsertHooks []UsageStatHook
var usageStatAfterUpsertMu sync.Mutex
var usageStatAfterUpsertHooks []UsageStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsageStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsageStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsageStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsageStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsageStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsageStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsageStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsageStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsageStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usageStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsageStatHook registers your hook function for all future operations.
func AddUsageStatHook(hookPoint boil.HookPoint, usageStatHook UsageStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usageStatAfterSelectMu.Lock()
		usageStatAfterSelectHooks = append(usageStatAfterSelectHooks, usageStatHook)
		usageStatAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usageStatBeforeInsertMu.Lock()
		usageStatBeforeInsertHooks = append(usageStatBeforeInsertHooks, usageStatHook)
		usageStatBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usageStatAfterInsertMu.Lock()
		usageStatAfterInsertHooks = append(usageStatAfterInsertHooks, usageStatHook)
		usageStatAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usageStatBeforeUpdateMu.Lock()
		usageStatBeforeUpdateHooks = append(usageStatBeforeUpdateHooks, usageStatHook)
		usageStatBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usageStatAfterUpdateMu.Lock()
		usageStatAfterUpdateHooks = append(usageStatAfterUpdateHooks, usageStatHook)
		usageStatAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usageStatBeforeDeleteMu.Lock()
		usageStatBeforeDeleteHooks = append(usageStatBeforeDeleteHooks, usageStatHook)
		usageStatBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usageStatAfterDeleteMu.Lock()
		usageStatAfterDeleteHooks = append(usageStatAfterDeleteHooks, usageStatHook)
		usageStatAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usageStatBeforeUpsertMu.Lock()
		usageStatBeforeUpsertHooks = append(usageStatBeforeUpsertHooks, usageStatHook)
		usageStatBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usageStatAfterUpsertMu.Lock()
		usageStatAfterUpsertHooks = append(usageStatAfterUpsertHooks, usageStatHook)
		usageStatAfterUpsertMu.Unlock()
	}
}

// One returns a single usageStat record from the query.
func (q usageStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsageStat, error) {
	o := &UsageStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for usage_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsageStat records from the query.
func (q usageStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsageStatSlice, error) {
	var o []*UsageStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to UsageStat slice")
	}

	if len(usageStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsageStat records in the query.
func (q usageStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count usage_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usageStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if usage_stats exists")
	}

	return count > 0, nil
}

// UsageStats retrieves all the records using an executor.
func UsageStats(mods ...qm.QueryMod) usageStatQuery {
	mods = append(mods, qm.From("\"usage_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"usage_stats\".*"})
	}

	return usageStatQuery{q}
}

// FindUsageStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsageStat(ctx context.Context, exec boil.ContextExecutor, userID string, metricName string, periodStart time.Time, selectCols ...string) (*UsageStat, error) {
	usageStatObj := &UsageStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"usage_stats\" where \"user_id\"=$1 AND \"metric_name\"=$2 AND \"period_start\"=$3", sel,
	)

	q := queries.Raw(query, userID, metricName, periodStart)

	err := q.Bind(ctx, exec, usageStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from usage_stats")
	}

	if err = usageStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usageStatObj, err
	}

	return usageStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsageStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no usage_stats provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usageStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usageStatInsertCacheMut.RLock()
	cache, cached := usageStatInsertCache[key]
	usageStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usageStatAllColumns,
			usageStatColumnsWithDefault,
			usageStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usageStatType, usageStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usageStatType, usageStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"usage_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"usage_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into usage_stats")
	}

	if !cached {
		usageStatInsertCacheMut.Lock()
		usageStatInsertCache[key] = cache
		usageStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsageStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsageStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usageStatUpdateCacheMut.RLock()
	cache, cached := usageStatUpdateCache[key]
	usageStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usageStatAllColumns,
			usageStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update usage_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"usage_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usageStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usageStatType, usageStatMapping, append(wl, usageStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update usage_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for usage_stats")
	}

	if !cached {
		usageStatUpdateCacheMut.Lock()
		usageStatUpdateCache[key] = cache
		usageStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usageStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for usage_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for usage_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsageStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usageStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"usage_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usageStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in usageStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all usageStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsageStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no usage_stats provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usageStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usageStatUpsertCacheMut.RLock()
	cache, cached := usageStatUpsertCache[key]
	usageStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usageStatAllColumns,
			usageStatColumnsWithDefault,
			usageStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usageStatAllColumns,
			usageStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert usage_stats, could not build update column list")
		}

		ret := strmangle.SetComplement(usageStatAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(usageStatPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert usage_stats, could not build conflict column list")
			}

			conflict = make([]string, len(usageStatPrimaryKeyColumns))
			copy(conflict, usageStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"usage_stats\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(usageStatType, usageStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usageStatType, usageStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert usage_stats")
	}

	if !cached {
		usageStatUpsertCacheMut.Lock()
		usageStatUpsertCache[key] = cache
		usageStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsageStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsageStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no UsageStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usageStatPrimaryKeyMapping)
	sql := "DELETE FROM \"usage_stats\" WHERE \"user_id\"=$1 AND \"metric_name\"=$2 AND \"period_start\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from usage_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for usage_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usageStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no usageStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from usage_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for usage_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsageStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usageStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usageStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"usage_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usageStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from usageStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for usage_stats")
	}

	if len(usageStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsageStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsageStat(ctx, exec, o.UserID, o.MetricName, o.PeriodStart)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsageStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsageStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usageStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"usage_stats\".* FROM \"usage_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usageStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in UsageStatSlice")
	}

	*o = slice

	return nil
}

// UsageStatExists checks if the UsageStat row exists.
func UsageStatExists(ctx context.Context, exec boil.ContextExecutor, userID string, metricName string, periodStart time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"usage_stats\" where \"user_id\"=$1 AND \"metric_name\"=$2 AND \"period_start\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, metricName, periodStart)
	}
	row := exec.QueryRowContext(ctx, sql, userID, metricName, periodStart)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if usage_stats exists")
	}

	return exists, nil
}

// Exists checks if the UsageStat row exists.
func (o *UsageStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsageStatExists(ctx, exec, o.UserID, o.MetricName, o.PeriodStart)
}

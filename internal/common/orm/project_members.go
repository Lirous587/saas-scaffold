// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ProjectMember is an object representing the database table.
type ProjectMember struct {
	OwnerID   string      `boil:"owner_id" json:"owner_id" toml:"owner_id" yaml:"owner_id"`
	ProjectID string      `boil:"project_id" json:"project_id" toml:"project_id" yaml:"project_id"`
	UserID    string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Role      string      `boil:"role" json:"role" toml:"role" yaml:"role"`
	AddedAt   time.Time   `boil:"added_at" json:"added_at" toml:"added_at" yaml:"added_at"`
	AddedBy   null.String `boil:"added_by" json:"added_by,omitempty" toml:"added_by" yaml:"added_by,omitempty"`
	Status    string      `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *projectMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L projectMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ProjectMemberColumns = struct {
	OwnerID   string
	ProjectID string
	UserID    string
	Role      string
	AddedAt   string
	AddedBy   string
	Status    string
}{
	OwnerID:   "owner_id",
	ProjectID: "project_id",
	UserID:    "user_id",
	Role:      "role",
	AddedAt:   "added_at",
	AddedBy:   "added_by",
	Status:    "status",
}

var ProjectMemberTableColumns = struct {
	OwnerID   string
	ProjectID string
	UserID    string
	Role      string
	AddedAt   string
	AddedBy   string
	Status    string
}{
	OwnerID:   "project_members.owner_id",
	ProjectID: "project_members.project_id",
	UserID:    "project_members.user_id",
	Role:      "project_members.role",
	AddedAt:   "project_members.added_at",
	AddedBy:   "project_members.added_by",
	Status:    "project_members.status",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ProjectMemberWhere = struct {
	OwnerID   whereHelperstring
	ProjectID whereHelperstring
	UserID    whereHelperstring
	Role      whereHelperstring
	AddedAt   whereHelpertime_Time
	AddedBy   whereHelpernull_String
	Status    whereHelperstring
}{
	OwnerID:   whereHelperstring{field: "\"project_members\".\"owner_id\""},
	ProjectID: whereHelperstring{field: "\"project_members\".\"project_id\""},
	UserID:    whereHelperstring{field: "\"project_members\".\"user_id\""},
	Role:      whereHelperstring{field: "\"project_members\".\"role\""},
	AddedAt:   whereHelpertime_Time{field: "\"project_members\".\"added_at\""},
	AddedBy:   whereHelpernull_String{field: "\"project_members\".\"added_by\""},
	Status:    whereHelperstring{field: "\"project_members\".\"status\""},
}

// ProjectMemberRels is where relationship names are stored.
var ProjectMemberRels = struct {
}{}

// projectMemberR is where relationships are stored.
type projectMemberR struct {
}

// NewStruct creates a new relationship struct
func (*projectMemberR) NewStruct() *projectMemberR {
	return &projectMemberR{}
}

// projectMemberL is where Load methods for each relationship are stored.
type projectMemberL struct{}

var (
	projectMemberAllColumns            = []string{"owner_id", "project_id", "user_id", "role", "added_at", "added_by", "status"}
	projectMemberColumnsWithoutDefault = []string{"owner_id", "project_id", "user_id"}
	projectMemberColumnsWithDefault    = []string{"role", "added_at", "added_by", "status"}
	projectMemberPrimaryKeyColumns     = []string{"owner_id", "project_id", "user_id"}
	projectMemberGeneratedColumns      = []string{}
)

type (
	// ProjectMemberSlice is an alias for a slice of pointers to ProjectMember.
	// This should almost always be used instead of []ProjectMember.
	ProjectMemberSlice []*ProjectMember
	// ProjectMemberHook is the signature for custom ProjectMember hook methods
	ProjectMemberHook func(context.Context, boil.ContextExecutor, *ProjectMember) error

	projectMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	projectMemberType                 = reflect.TypeOf(&ProjectMember{})
	projectMemberMapping              = queries.MakeStructMapping(projectMemberType)
	projectMemberPrimaryKeyMapping, _ = queries.BindMapping(projectMemberType, projectMemberMapping, projectMemberPrimaryKeyColumns)
	projectMemberInsertCacheMut       sync.RWMutex
	projectMemberInsertCache          = make(map[string]insertCache)
	projectMemberUpdateCacheMut       sync.RWMutex
	projectMemberUpdateCache          = make(map[string]updateCache)
	projectMemberUpsertCacheMut       sync.RWMutex
	projectMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var projectMemberAfterSelectMu sync.Mutex
var projectMemberAfterSelectHooks []ProjectMemberHook

var projectMemberBeforeInsertMu sync.Mutex
var projectMemberBeforeInsertHooks []ProjectMemberHook
var projectMemberAfterInsertMu sync.Mutex
var projectMemberAfterInsertHooks []ProjectMemberHook

var projectMemberBeforeUpdateMu sync.Mutex
var projectMemberBeforeUpdateHooks []ProjectMemberHook
var projectMemberAfterUpdateMu sync.Mutex
var projectMemberAfterUpdateHooks []ProjectMemberHook

var projectMemberBeforeDeleteMu sync.Mutex
var projectMemberBeforeDeleteHooks []ProjectMemberHook
var projectMemberAfterDeleteMu sync.Mutex
var projectMemberAfterDeleteHooks []ProjectMemberHook

var projectMemberBeforeUpsertMu sync.Mutex
var projectMemberBeforeUpsertHooks []ProjectMemberHook
var projectMemberAfterUpsertMu sync.Mutex
var projectMemberAfterUpsertHooks []ProjectMemberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ProjectMember) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ProjectMember) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ProjectMember) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ProjectMember) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ProjectMember) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ProjectMember) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ProjectMember) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ProjectMember) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ProjectMember) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range projectMemberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddProjectMemberHook registers your hook function for all future operations.
func AddProjectMemberHook(hookPoint boil.HookPoint, projectMemberHook ProjectMemberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		projectMemberAfterSelectMu.Lock()
		projectMemberAfterSelectHooks = append(projectMemberAfterSelectHooks, projectMemberHook)
		projectMemberAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		projectMemberBeforeInsertMu.Lock()
		projectMemberBeforeInsertHooks = append(projectMemberBeforeInsertHooks, projectMemberHook)
		projectMemberBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		projectMemberAfterInsertMu.Lock()
		projectMemberAfterInsertHooks = append(projectMemberAfterInsertHooks, projectMemberHook)
		projectMemberAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		projectMemberBeforeUpdateMu.Lock()
		projectMemberBeforeUpdateHooks = append(projectMemberBeforeUpdateHooks, projectMemberHook)
		projectMemberBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		projectMemberAfterUpdateMu.Lock()
		projectMemberAfterUpdateHooks = append(projectMemberAfterUpdateHooks, projectMemberHook)
		projectMemberAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		projectMemberBeforeDeleteMu.Lock()
		projectMemberBeforeDeleteHooks = append(projectMemberBeforeDeleteHooks, projectMemberHook)
		projectMemberBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		projectMemberAfterDeleteMu.Lock()
		projectMemberAfterDeleteHooks = append(projectMemberAfterDeleteHooks, projectMemberHook)
		projectMemberAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		projectMemberBeforeUpsertMu.Lock()
		projectMemberBeforeUpsertHooks = append(projectMemberBeforeUpsertHooks, projectMemberHook)
		projectMemberBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		projectMemberAfterUpsertMu.Lock()
		projectMemberAfterUpsertHooks = append(projectMemberAfterUpsertHooks, projectMemberHook)
		projectMemberAfterUpsertMu.Unlock()
	}
}

// One returns a single projectMember record from the query.
func (q projectMemberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ProjectMember, error) {
	o := &ProjectMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for project_members")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ProjectMember records from the query.
func (q projectMemberQuery) All(ctx context.Context, exec boil.ContextExecutor) (ProjectMemberSlice, error) {
	var o []*ProjectMember

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to ProjectMember slice")
	}

	if len(projectMemberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ProjectMember records in the query.
func (q projectMemberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count project_members rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q projectMemberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if project_members exists")
	}

	return count > 0, nil
}

// ProjectMembers retrieves all the records using an executor.
func ProjectMembers(mods ...qm.QueryMod) projectMemberQuery {
	mods = append(mods, qm.From("\"project_members\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"project_members\".*"})
	}

	return projectMemberQuery{q}
}

// FindProjectMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindProjectMember(ctx context.Context, exec boil.ContextExecutor, ownerID string, projectID string, userID string, selectCols ...string) (*ProjectMember, error) {
	projectMemberObj := &ProjectMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"project_members\" where \"owner_id\"=$1 AND \"project_id\"=$2 AND \"user_id\"=$3", sel,
	)

	q := queries.Raw(query, ownerID, projectID, userID)

	err := q.Bind(ctx, exec, projectMemberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from project_members")
	}

	if err = projectMemberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return projectMemberObj, err
	}

	return projectMemberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ProjectMember) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no project_members provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	projectMemberInsertCacheMut.RLock()
	cache, cached := projectMemberInsertCache[key]
	projectMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			projectMemberAllColumns,
			projectMemberColumnsWithDefault,
			projectMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(projectMemberType, projectMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(projectMemberType, projectMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"project_members\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"project_members\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into project_members")
	}

	if !cached {
		projectMemberInsertCacheMut.Lock()
		projectMemberInsertCache[key] = cache
		projectMemberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ProjectMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ProjectMember) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	projectMemberUpdateCacheMut.RLock()
	cache, cached := projectMemberUpdateCache[key]
	projectMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			projectMemberAllColumns,
			projectMemberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update project_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"project_members\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, projectMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(projectMemberType, projectMemberMapping, append(wl, projectMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update project_members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for project_members")
	}

	if !cached {
		projectMemberUpdateCacheMut.Lock()
		projectMemberUpdateCache[key] = cache
		projectMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q projectMemberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for project_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for project_members")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ProjectMemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"project_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, projectMemberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in projectMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all projectMember")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ProjectMember) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no project_members provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(projectMemberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	projectMemberUpsertCacheMut.RLock()
	cache, cached := projectMemberUpsertCache[key]
	projectMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			projectMemberAllColumns,
			projectMemberColumnsWithDefault,
			projectMemberColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			projectMemberAllColumns,
			projectMemberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert project_members, could not build update column list")
		}

		ret := strmangle.SetComplement(projectMemberAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(projectMemberPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert project_members, could not build conflict column list")
			}

			conflict = make([]string, len(projectMemberPrimaryKeyColumns))
			copy(conflict, projectMemberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"project_members\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(projectMemberType, projectMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(projectMemberType, projectMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert project_members")
	}

	if !cached {
		projectMemberUpsertCacheMut.Lock()
		projectMemberUpsertCache[key] = cache
		projectMemberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ProjectMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ProjectMember) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no ProjectMember provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), projectMemberPrimaryKeyMapping)
	sql := "DELETE FROM \"project_members\" WHERE \"owner_id\"=$1 AND \"project_id\"=$2 AND \"user_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from project_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for project_members")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q projectMemberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no projectMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from project_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for project_members")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ProjectMemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(projectMemberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"project_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, projectMemberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from projectMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for project_members")
	}

	if len(projectMemberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ProjectMember) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindProjectMember(ctx, exec, o.OwnerID, o.ProjectID, o.UserID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ProjectMemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ProjectMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), projectMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"project_members\".* FROM \"project_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, projectMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ProjectMemberSlice")
	}

	*o = slice

	return nil
}

// ProjectMemberExists checks if the ProjectMember row exists.
func ProjectMemberExists(ctx context.Context, exec boil.ContextExecutor, ownerID string, projectID string, userID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"project_members\" where \"owner_id\"=$1 AND \"project_id\"=$2 AND \"user_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, ownerID, projectID, userID)
	}
	row := exec.QueryRowContext(ctx, sql, ownerID, projectID, userID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if project_members exists")
	}

	return exists, nil
}

// Exists checks if the ProjectMember row exists.
func (o *ProjectMember) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ProjectMemberExists(ctx, exec, o.OwnerID, o.ProjectID, o.UserID)
}

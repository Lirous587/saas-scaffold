// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CitusSchema is an object representing the database table.
type CitusSchema struct {
	SchemaName   null.String `boil:"schema_name" json:"schema_name,omitempty" toml:"schema_name" yaml:"schema_name,omitempty"`
	ColocationID null.Int    `boil:"colocation_id" json:"colocation_id,omitempty" toml:"colocation_id" yaml:"colocation_id,omitempty"`
	SchemaSize   null.String `boil:"schema_size" json:"schema_size,omitempty" toml:"schema_size" yaml:"schema_size,omitempty"`
	SchemaOwner  null.String `boil:"schema_owner" json:"schema_owner,omitempty" toml:"schema_owner" yaml:"schema_owner,omitempty"`
}

var CitusSchemaColumns = struct {
	SchemaName   string
	ColocationID string
	SchemaSize   string
	SchemaOwner  string
}{
	SchemaName:   "schema_name",
	ColocationID: "colocation_id",
	SchemaSize:   "schema_size",
	SchemaOwner:  "schema_owner",
}

var CitusSchemaTableColumns = struct {
	SchemaName   string
	ColocationID string
	SchemaSize   string
	SchemaOwner  string
}{
	SchemaName:   "citus_schemas.schema_name",
	ColocationID: "citus_schemas.colocation_id",
	SchemaSize:   "citus_schemas.schema_size",
	SchemaOwner:  "citus_schemas.schema_owner",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CitusSchemaWhere = struct {
	SchemaName   whereHelpernull_String
	ColocationID whereHelpernull_Int
	SchemaSize   whereHelpernull_String
	SchemaOwner  whereHelpernull_String
}{
	SchemaName:   whereHelpernull_String{field: "\"citus_schemas\".\"schema_name\""},
	ColocationID: whereHelpernull_Int{field: "\"citus_schemas\".\"colocation_id\""},
	SchemaSize:   whereHelpernull_String{field: "\"citus_schemas\".\"schema_size\""},
	SchemaOwner:  whereHelpernull_String{field: "\"citus_schemas\".\"schema_owner\""},
}

var (
	citusSchemaAllColumns            = []string{"schema_name", "colocation_id", "schema_size", "schema_owner"}
	citusSchemaColumnsWithoutDefault = []string{}
	citusSchemaColumnsWithDefault    = []string{"schema_name", "colocation_id", "schema_size", "schema_owner"}
	citusSchemaPrimaryKeyColumns     = []string{}
	citusSchemaGeneratedColumns      = []string{}
)

type (
	// CitusSchemaSlice is an alias for a slice of pointers to CitusSchema.
	// This should almost always be used instead of []CitusSchema.
	CitusSchemaSlice []*CitusSchema
	// CitusSchemaHook is the signature for custom CitusSchema hook methods
	CitusSchemaHook func(context.Context, boil.ContextExecutor, *CitusSchema) error

	citusSchemaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	citusSchemaType           = reflect.TypeOf(&CitusSchema{})
	citusSchemaMapping        = queries.MakeStructMapping(citusSchemaType)
	citusSchemaInsertCacheMut sync.RWMutex
	citusSchemaInsertCache    = make(map[string]insertCache)
	citusSchemaUpdateCacheMut sync.RWMutex
	citusSchemaUpdateCache    = make(map[string]updateCache)
	citusSchemaUpsertCacheMut sync.RWMutex
	citusSchemaUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var citusSchemaAfterSelectMu sync.Mutex
var citusSchemaAfterSelectHooks []CitusSchemaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CitusSchema) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range citusSchemaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCitusSchemaHook registers your hook function for all future operations.
func AddCitusSchemaHook(hookPoint boil.HookPoint, citusSchemaHook CitusSchemaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		citusSchemaAfterSelectMu.Lock()
		citusSchemaAfterSelectHooks = append(citusSchemaAfterSelectHooks, citusSchemaHook)
		citusSchemaAfterSelectMu.Unlock()
	}
}

// One returns a single citusSchema record from the query.
func (q citusSchemaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CitusSchema, error) {
	o := &CitusSchema{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for citus_schemas")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CitusSchema records from the query.
func (q citusSchemaQuery) All(ctx context.Context, exec boil.ContextExecutor) (CitusSchemaSlice, error) {
	var o []*CitusSchema

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to CitusSchema slice")
	}

	if len(citusSchemaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CitusSchema records in the query.
func (q citusSchemaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count citus_schemas rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q citusSchemaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if citus_schemas exists")
	}

	return count > 0, nil
}

// CitusSchemas retrieves all the records using an executor.
func CitusSchemas(mods ...qm.QueryMod) citusSchemaQuery {
	mods = append(mods, qm.From("\"citus_schemas\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"citus_schemas\".*"})
	}

	return citusSchemaQuery{q}
}

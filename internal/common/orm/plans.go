// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Plan is an object representing the database table.
type Plan struct {
	PlanType           string        `boil:"plan_type" json:"plan_type" toml:"plan_type" yaml:"plan_type"`
	Name               string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	MaxTeams           int           `boil:"max_teams" json:"max_teams" toml:"max_teams" yaml:"max_teams"`
	MaxMembersPerTeam  int           `boil:"max_members_per_team" json:"max_members_per_team" toml:"max_members_per_team" yaml:"max_members_per_team"`
	MaxProjectsPerTeam int           `boil:"max_projects_per_team" json:"max_projects_per_team" toml:"max_projects_per_team" yaml:"max_projects_per_team"`
	MaxInvitedUsers    int           `boil:"max_invited_users" json:"max_invited_users" toml:"max_invited_users" yaml:"max_invited_users"`
	MaxAPICallsMonthly int           `boil:"max_api_calls_monthly" json:"max_api_calls_monthly" toml:"max_api_calls_monthly" yaml:"max_api_calls_monthly"`
	PriceMonthly       types.Decimal `boil:"price_monthly" json:"price_monthly" toml:"price_monthly" yaml:"price_monthly"`
	Features           null.JSON     `boil:"features" json:"features,omitempty" toml:"features" yaml:"features,omitempty"`
	CreatedAt          time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *planR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L planL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlanColumns = struct {
	PlanType           string
	Name               string
	MaxTeams           string
	MaxMembersPerTeam  string
	MaxProjectsPerTeam string
	MaxInvitedUsers    string
	MaxAPICallsMonthly string
	PriceMonthly       string
	Features           string
	CreatedAt          string
}{
	PlanType:           "plan_type",
	Name:               "name",
	MaxTeams:           "max_teams",
	MaxMembersPerTeam:  "max_members_per_team",
	MaxProjectsPerTeam: "max_projects_per_team",
	MaxInvitedUsers:    "max_invited_users",
	MaxAPICallsMonthly: "max_api_calls_monthly",
	PriceMonthly:       "price_monthly",
	Features:           "features",
	CreatedAt:          "created_at",
}

var PlanTableColumns = struct {
	PlanType           string
	Name               string
	MaxTeams           string
	MaxMembersPerTeam  string
	MaxProjectsPerTeam string
	MaxInvitedUsers    string
	MaxAPICallsMonthly string
	PriceMonthly       string
	Features           string
	CreatedAt          string
}{
	PlanType:           "plans.plan_type",
	Name:               "plans.name",
	MaxTeams:           "plans.max_teams",
	MaxMembersPerTeam:  "plans.max_members_per_team",
	MaxProjectsPerTeam: "plans.max_projects_per_team",
	MaxInvitedUsers:    "plans.max_invited_users",
	MaxAPICallsMonthly: "plans.max_api_calls_monthly",
	PriceMonthly:       "plans.price_monthly",
	Features:           "plans.features",
	CreatedAt:          "plans.created_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var PlanWhere = struct {
	PlanType           whereHelperstring
	Name               whereHelperstring
	MaxTeams           whereHelperint
	MaxMembersPerTeam  whereHelperint
	MaxProjectsPerTeam whereHelperint
	MaxInvitedUsers    whereHelperint
	MaxAPICallsMonthly whereHelperint
	PriceMonthly       whereHelpertypes_Decimal
	Features           whereHelpernull_JSON
	CreatedAt          whereHelpertime_Time
}{
	PlanType:           whereHelperstring{field: "\"plans\".\"plan_type\""},
	Name:               whereHelperstring{field: "\"plans\".\"name\""},
	MaxTeams:           whereHelperint{field: "\"plans\".\"max_teams\""},
	MaxMembersPerTeam:  whereHelperint{field: "\"plans\".\"max_members_per_team\""},
	MaxProjectsPerTeam: whereHelperint{field: "\"plans\".\"max_projects_per_team\""},
	MaxInvitedUsers:    whereHelperint{field: "\"plans\".\"max_invited_users\""},
	MaxAPICallsMonthly: whereHelperint{field: "\"plans\".\"max_api_calls_monthly\""},
	PriceMonthly:       whereHelpertypes_Decimal{field: "\"plans\".\"price_monthly\""},
	Features:           whereHelpernull_JSON{field: "\"plans\".\"features\""},
	CreatedAt:          whereHelpertime_Time{field: "\"plans\".\"created_at\""},
}

// PlanRels is where relationship names are stored.
var PlanRels = struct {
}{}

// planR is where relationships are stored.
type planR struct {
}

// NewStruct creates a new relationship struct
func (*planR) NewStruct() *planR {
	return &planR{}
}

// planL is where Load methods for each relationship are stored.
type planL struct{}

var (
	planAllColumns            = []string{"plan_type", "name", "max_teams", "max_members_per_team", "max_projects_per_team", "max_invited_users", "max_api_calls_monthly", "price_monthly", "features", "created_at"}
	planColumnsWithoutDefault = []string{"plan_type", "name"}
	planColumnsWithDefault    = []string{"max_teams", "max_members_per_team", "max_projects_per_team", "max_invited_users", "max_api_calls_monthly", "price_monthly", "features", "created_at"}
	planPrimaryKeyColumns     = []string{"plan_type"}
	planGeneratedColumns      = []string{}
)

type (
	// PlanSlice is an alias for a slice of pointers to Plan.
	// This should almost always be used instead of []Plan.
	PlanSlice []*Plan
	// PlanHook is the signature for custom Plan hook methods
	PlanHook func(context.Context, boil.ContextExecutor, *Plan) error

	planQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	planType                 = reflect.TypeOf(&Plan{})
	planMapping              = queries.MakeStructMapping(planType)
	planPrimaryKeyMapping, _ = queries.BindMapping(planType, planMapping, planPrimaryKeyColumns)
	planInsertCacheMut       sync.RWMutex
	planInsertCache          = make(map[string]insertCache)
	planUpdateCacheMut       sync.RWMutex
	planUpdateCache          = make(map[string]updateCache)
	planUpsertCacheMut       sync.RWMutex
	planUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var planAfterSelectMu sync.Mutex
var planAfterSelectHooks []PlanHook

var planBeforeInsertMu sync.Mutex
var planBeforeInsertHooks []PlanHook
var planAfterInsertMu sync.Mutex
var planAfterInsertHooks []PlanHook

var planBeforeUpdateMu sync.Mutex
var planBeforeUpdateHooks []PlanHook
var planAfterUpdateMu sync.Mutex
var planAfterUpdateHooks []PlanHook

var planBeforeDeleteMu sync.Mutex
var planBeforeDeleteHooks []PlanHook
var planAfterDeleteMu sync.Mutex
var planAfterDeleteHooks []PlanHook

var planBeforeUpsertMu sync.Mutex
var planBeforeUpsertHooks []PlanHook
var planAfterUpsertMu sync.Mutex
var planAfterUpsertHooks []PlanHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Plan) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Plan) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Plan) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Plan) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Plan) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Plan) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Plan) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Plan) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Plan) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range planAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlanHook registers your hook function for all future operations.
func AddPlanHook(hookPoint boil.HookPoint, planHook PlanHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		planAfterSelectMu.Lock()
		planAfterSelectHooks = append(planAfterSelectHooks, planHook)
		planAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		planBeforeInsertMu.Lock()
		planBeforeInsertHooks = append(planBeforeInsertHooks, planHook)
		planBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		planAfterInsertMu.Lock()
		planAfterInsertHooks = append(planAfterInsertHooks, planHook)
		planAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		planBeforeUpdateMu.Lock()
		planBeforeUpdateHooks = append(planBeforeUpdateHooks, planHook)
		planBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		planAfterUpdateMu.Lock()
		planAfterUpdateHooks = append(planAfterUpdateHooks, planHook)
		planAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		planBeforeDeleteMu.Lock()
		planBeforeDeleteHooks = append(planBeforeDeleteHooks, planHook)
		planBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		planAfterDeleteMu.Lock()
		planAfterDeleteHooks = append(planAfterDeleteHooks, planHook)
		planAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		planBeforeUpsertMu.Lock()
		planBeforeUpsertHooks = append(planBeforeUpsertHooks, planHook)
		planBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		planAfterUpsertMu.Lock()
		planAfterUpsertHooks = append(planAfterUpsertHooks, planHook)
		planAfterUpsertMu.Unlock()
	}
}

// One returns a single plan record from the query.
func (q planQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Plan, error) {
	o := &Plan{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for plans")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Plan records from the query.
func (q planQuery) All(ctx context.Context, exec boil.ContextExecutor) (PlanSlice, error) {
	var o []*Plan

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Plan slice")
	}

	if len(planAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Plan records in the query.
func (q planQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count plans rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q planQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if plans exists")
	}

	return count > 0, nil
}

// Plans retrieves all the records using an executor.
func Plans(mods ...qm.QueryMod) planQuery {
	mods = append(mods, qm.From("\"plans\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"plans\".*"})
	}

	return planQuery{q}
}

// FindPlan retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlan(ctx context.Context, exec boil.ContextExecutor, planType string, selectCols ...string) (*Plan, error) {
	planObj := &Plan{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"plans\" where \"plan_type\"=$1", sel,
	)

	q := queries.Raw(query, planType)

	err := q.Bind(ctx, exec, planObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from plans")
	}

	if err = planObj.doAfterSelectHooks(ctx, exec); err != nil {
		return planObj, err
	}

	return planObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Plan) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no plans provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	planInsertCacheMut.RLock()
	cache, cached := planInsertCache[key]
	planInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(planType, planMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"plans\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"plans\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into plans")
	}

	if !cached {
		planInsertCacheMut.Lock()
		planInsertCache[key] = cache
		planInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Plan.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Plan) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	planUpdateCacheMut.RLock()
	cache, cached := planUpdateCache[key]
	planUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update plans, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"plans\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, planPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(planType, planMapping, append(wl, planPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update plans row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for plans")
	}

	if !cached {
		planUpdateCacheMut.Lock()
		planUpdateCache[key] = cache
		planUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q planQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for plans")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlanSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"plans\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, planPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all plan")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Plan) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no plans provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(planColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	planUpsertCacheMut.RLock()
	cache, cached := planUpsertCache[key]
	planUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			planAllColumns,
			planColumnsWithDefault,
			planColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			planAllColumns,
			planPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert plans, could not build update column list")
		}

		ret := strmangle.SetComplement(planAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(planPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert plans, could not build conflict column list")
			}

			conflict = make([]string, len(planPrimaryKeyColumns))
			copy(conflict, planPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"plans\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(planType, planMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(planType, planMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert plans")
	}

	if !cached {
		planUpsertCacheMut.Lock()
		planUpsertCache[key] = cache
		planUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Plan record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Plan) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Plan provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), planPrimaryKeyMapping)
	sql := "DELETE FROM \"plans\" WHERE \"plan_type\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for plans")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q planQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no planQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from plans")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for plans")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlanSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(planBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"plans\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, planPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from plan slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for plans")
	}

	if len(planAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Plan) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPlan(ctx, exec, o.PlanType)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlanSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlanSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), planPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"plans\".* FROM \"plans\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, planPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in PlanSlice")
	}

	*o = slice

	return nil
}

// PlanExists checks if the Plan row exists.
func PlanExists(ctx context.Context, exec boil.ContextExecutor, planType string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"plans\" where \"plan_type\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, planType)
	}
	row := exec.QueryRowContext(ctx, sql, planType)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if plans exists")
	}

	return exists, nil
}

// Exists checks if the Plan row exists.
func (o *Plan) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PlanExists(ctx, exec, o.PlanType)
}

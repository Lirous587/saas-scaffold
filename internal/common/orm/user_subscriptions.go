// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserSubscription is an object representing the database table.
type UserSubscription struct {
	SubscriptionID string    `boil:"subscription_id" json:"subscription_id" toml:"subscription_id" yaml:"subscription_id"`
	UserID         string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PlanType       string    `boil:"plan_type" json:"plan_type" toml:"plan_type" yaml:"plan_type"`
	Status         string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	StartedAt      time.Time `boil:"started_at" json:"started_at" toml:"started_at" yaml:"started_at"`
	ExpiresAt      null.Time `boil:"expires_at" json:"expires_at,omitempty" toml:"expires_at" yaml:"expires_at,omitempty"`
	AutoRenew      bool      `boil:"auto_renew" json:"auto_renew" toml:"auto_renew" yaml:"auto_renew"`
	PaymentMethod  null.JSON `boil:"payment_method" json:"payment_method,omitempty" toml:"payment_method" yaml:"payment_method,omitempty"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userSubscriptionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userSubscriptionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserSubscriptionColumns = struct {
	SubscriptionID string
	UserID         string
	PlanType       string
	Status         string
	StartedAt      string
	ExpiresAt      string
	AutoRenew      string
	PaymentMethod  string
	CreatedAt      string
	UpdatedAt      string
}{
	SubscriptionID: "subscription_id",
	UserID:         "user_id",
	PlanType:       "plan_type",
	Status:         "status",
	StartedAt:      "started_at",
	ExpiresAt:      "expires_at",
	AutoRenew:      "auto_renew",
	PaymentMethod:  "payment_method",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var UserSubscriptionTableColumns = struct {
	SubscriptionID string
	UserID         string
	PlanType       string
	Status         string
	StartedAt      string
	ExpiresAt      string
	AutoRenew      string
	PaymentMethod  string
	CreatedAt      string
	UpdatedAt      string
}{
	SubscriptionID: "user_subscriptions.subscription_id",
	UserID:         "user_subscriptions.user_id",
	PlanType:       "user_subscriptions.plan_type",
	Status:         "user_subscriptions.status",
	StartedAt:      "user_subscriptions.started_at",
	ExpiresAt:      "user_subscriptions.expires_at",
	AutoRenew:      "user_subscriptions.auto_renew",
	PaymentMethod:  "user_subscriptions.payment_method",
	CreatedAt:      "user_subscriptions.created_at",
	UpdatedAt:      "user_subscriptions.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var UserSubscriptionWhere = struct {
	SubscriptionID whereHelperstring
	UserID         whereHelperstring
	PlanType       whereHelperstring
	Status         whereHelperstring
	StartedAt      whereHelpertime_Time
	ExpiresAt      whereHelpernull_Time
	AutoRenew      whereHelperbool
	PaymentMethod  whereHelpernull_JSON
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	SubscriptionID: whereHelperstring{field: "\"user_subscriptions\".\"subscription_id\""},
	UserID:         whereHelperstring{field: "\"user_subscriptions\".\"user_id\""},
	PlanType:       whereHelperstring{field: "\"user_subscriptions\".\"plan_type\""},
	Status:         whereHelperstring{field: "\"user_subscriptions\".\"status\""},
	StartedAt:      whereHelpertime_Time{field: "\"user_subscriptions\".\"started_at\""},
	ExpiresAt:      whereHelpernull_Time{field: "\"user_subscriptions\".\"expires_at\""},
	AutoRenew:      whereHelperbool{field: "\"user_subscriptions\".\"auto_renew\""},
	PaymentMethod:  whereHelpernull_JSON{field: "\"user_subscriptions\".\"payment_method\""},
	CreatedAt:      whereHelpertime_Time{field: "\"user_subscriptions\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"user_subscriptions\".\"updated_at\""},
}

// UserSubscriptionRels is where relationship names are stored.
var UserSubscriptionRels = struct {
}{}

// userSubscriptionR is where relationships are stored.
type userSubscriptionR struct {
}

// NewStruct creates a new relationship struct
func (*userSubscriptionR) NewStruct() *userSubscriptionR {
	return &userSubscriptionR{}
}

// userSubscriptionL is where Load methods for each relationship are stored.
type userSubscriptionL struct{}

var (
	userSubscriptionAllColumns            = []string{"subscription_id", "user_id", "plan_type", "status", "started_at", "expires_at", "auto_renew", "payment_method", "created_at", "updated_at"}
	userSubscriptionColumnsWithoutDefault = []string{"user_id", "plan_type"}
	userSubscriptionColumnsWithDefault    = []string{"subscription_id", "status", "started_at", "expires_at", "auto_renew", "payment_method", "created_at", "updated_at"}
	userSubscriptionPrimaryKeyColumns     = []string{"subscription_id"}
	userSubscriptionGeneratedColumns      = []string{}
)

type (
	// UserSubscriptionSlice is an alias for a slice of pointers to UserSubscription.
	// This should almost always be used instead of []UserSubscription.
	UserSubscriptionSlice []*UserSubscription
	// UserSubscriptionHook is the signature for custom UserSubscription hook methods
	UserSubscriptionHook func(context.Context, boil.ContextExecutor, *UserSubscription) error

	userSubscriptionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userSubscriptionType                 = reflect.TypeOf(&UserSubscription{})
	userSubscriptionMapping              = queries.MakeStructMapping(userSubscriptionType)
	userSubscriptionPrimaryKeyMapping, _ = queries.BindMapping(userSubscriptionType, userSubscriptionMapping, userSubscriptionPrimaryKeyColumns)
	userSubscriptionInsertCacheMut       sync.RWMutex
	userSubscriptionInsertCache          = make(map[string]insertCache)
	userSubscriptionUpdateCacheMut       sync.RWMutex
	userSubscriptionUpdateCache          = make(map[string]updateCache)
	userSubscriptionUpsertCacheMut       sync.RWMutex
	userSubscriptionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userSubscriptionAfterSelectMu sync.Mutex
var userSubscriptionAfterSelectHooks []UserSubscriptionHook

var userSubscriptionBeforeInsertMu sync.Mutex
var userSubscriptionBeforeInsertHooks []UserSubscriptionHook
var userSubscriptionAfterInsertMu sync.Mutex
var userSubscriptionAfterInsertHooks []UserSubscriptionHook

var userSubscriptionBeforeUpdateMu sync.Mutex
var userSubscriptionBeforeUpdateHooks []UserSubscriptionHook
var userSubscriptionAfterUpdateMu sync.Mutex
var userSubscriptionAfterUpdateHooks []UserSubscriptionHook

var userSubscriptionBeforeDeleteMu sync.Mutex
var userSubscriptionBeforeDeleteHooks []UserSubscriptionHook
var userSubscriptionAfterDeleteMu sync.Mutex
var userSubscriptionAfterDeleteHooks []UserSubscriptionHook

var userSubscriptionBeforeUpsertMu sync.Mutex
var userSubscriptionBeforeUpsertHooks []UserSubscriptionHook
var userSubscriptionAfterUpsertMu sync.Mutex
var userSubscriptionAfterUpsertHooks []UserSubscriptionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserSubscription) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserSubscription) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserSubscription) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserSubscription) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserSubscription) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserSubscription) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserSubscription) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserSubscription) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserSubscription) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userSubscriptionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserSubscriptionHook registers your hook function for all future operations.
func AddUserSubscriptionHook(hookPoint boil.HookPoint, userSubscriptionHook UserSubscriptionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userSubscriptionAfterSelectMu.Lock()
		userSubscriptionAfterSelectHooks = append(userSubscriptionAfterSelectHooks, userSubscriptionHook)
		userSubscriptionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userSubscriptionBeforeInsertMu.Lock()
		userSubscriptionBeforeInsertHooks = append(userSubscriptionBeforeInsertHooks, userSubscriptionHook)
		userSubscriptionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userSubscriptionAfterInsertMu.Lock()
		userSubscriptionAfterInsertHooks = append(userSubscriptionAfterInsertHooks, userSubscriptionHook)
		userSubscriptionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userSubscriptionBeforeUpdateMu.Lock()
		userSubscriptionBeforeUpdateHooks = append(userSubscriptionBeforeUpdateHooks, userSubscriptionHook)
		userSubscriptionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userSubscriptionAfterUpdateMu.Lock()
		userSubscriptionAfterUpdateHooks = append(userSubscriptionAfterUpdateHooks, userSubscriptionHook)
		userSubscriptionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userSubscriptionBeforeDeleteMu.Lock()
		userSubscriptionBeforeDeleteHooks = append(userSubscriptionBeforeDeleteHooks, userSubscriptionHook)
		userSubscriptionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userSubscriptionAfterDeleteMu.Lock()
		userSubscriptionAfterDeleteHooks = append(userSubscriptionAfterDeleteHooks, userSubscriptionHook)
		userSubscriptionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userSubscriptionBeforeUpsertMu.Lock()
		userSubscriptionBeforeUpsertHooks = append(userSubscriptionBeforeUpsertHooks, userSubscriptionHook)
		userSubscriptionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userSubscriptionAfterUpsertMu.Lock()
		userSubscriptionAfterUpsertHooks = append(userSubscriptionAfterUpsertHooks, userSubscriptionHook)
		userSubscriptionAfterUpsertMu.Unlock()
	}
}

// One returns a single userSubscription record from the query.
func (q userSubscriptionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserSubscription, error) {
	o := &UserSubscription{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for user_subscriptions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserSubscription records from the query.
func (q userSubscriptionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSubscriptionSlice, error) {
	var o []*UserSubscription

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to UserSubscription slice")
	}

	if len(userSubscriptionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserSubscription records in the query.
func (q userSubscriptionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count user_subscriptions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userSubscriptionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if user_subscriptions exists")
	}

	return count > 0, nil
}

// UserSubscriptions retrieves all the records using an executor.
func UserSubscriptions(mods ...qm.QueryMod) userSubscriptionQuery {
	mods = append(mods, qm.From("\"user_subscriptions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_subscriptions\".*"})
	}

	return userSubscriptionQuery{q}
}

// FindUserSubscription retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserSubscription(ctx context.Context, exec boil.ContextExecutor, subscriptionID string, selectCols ...string) (*UserSubscription, error) {
	userSubscriptionObj := &UserSubscription{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_subscriptions\" where \"subscription_id\"=$1", sel,
	)

	q := queries.Raw(query, subscriptionID)

	err := q.Bind(ctx, exec, userSubscriptionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from user_subscriptions")
	}

	if err = userSubscriptionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userSubscriptionObj, err
	}

	return userSubscriptionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserSubscription) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no user_subscriptions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSubscriptionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userSubscriptionInsertCacheMut.RLock()
	cache, cached := userSubscriptionInsertCache[key]
	userSubscriptionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userSubscriptionAllColumns,
			userSubscriptionColumnsWithDefault,
			userSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userSubscriptionType, userSubscriptionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userSubscriptionType, userSubscriptionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_subscriptions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_subscriptions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into user_subscriptions")
	}

	if !cached {
		userSubscriptionInsertCacheMut.Lock()
		userSubscriptionInsertCache[key] = cache
		userSubscriptionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserSubscription.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserSubscription) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userSubscriptionUpdateCacheMut.RLock()
	cache, cached := userSubscriptionUpdateCache[key]
	userSubscriptionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userSubscriptionAllColumns,
			userSubscriptionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update user_subscriptions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_subscriptions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userSubscriptionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userSubscriptionType, userSubscriptionMapping, append(wl, userSubscriptionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update user_subscriptions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for user_subscriptions")
	}

	if !cached {
		userSubscriptionUpdateCacheMut.Lock()
		userSubscriptionUpdateCache[key] = cache
		userSubscriptionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userSubscriptionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for user_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for user_subscriptions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSubscriptionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_subscriptions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userSubscriptionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in userSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all userSubscription")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserSubscription) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no user_subscriptions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userSubscriptionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userSubscriptionUpsertCacheMut.RLock()
	cache, cached := userSubscriptionUpsertCache[key]
	userSubscriptionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userSubscriptionAllColumns,
			userSubscriptionColumnsWithDefault,
			userSubscriptionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userSubscriptionAllColumns,
			userSubscriptionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert user_subscriptions, could not build update column list")
		}

		ret := strmangle.SetComplement(userSubscriptionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userSubscriptionPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert user_subscriptions, could not build conflict column list")
			}

			conflict = make([]string, len(userSubscriptionPrimaryKeyColumns))
			copy(conflict, userSubscriptionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_subscriptions\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userSubscriptionType, userSubscriptionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userSubscriptionType, userSubscriptionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert user_subscriptions")
	}

	if !cached {
		userSubscriptionUpsertCacheMut.Lock()
		userSubscriptionUpsertCache[key] = cache
		userSubscriptionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserSubscription record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserSubscription) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no UserSubscription provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userSubscriptionPrimaryKeyMapping)
	sql := "DELETE FROM \"user_subscriptions\" WHERE \"subscription_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from user_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for user_subscriptions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userSubscriptionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no userSubscriptionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from user_subscriptions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for user_subscriptions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSubscriptionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userSubscriptionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSubscriptionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from userSubscription slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for user_subscriptions")
	}

	if len(userSubscriptionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserSubscription) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserSubscription(ctx, exec, o.SubscriptionID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSubscriptionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSubscriptionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userSubscriptionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_subscriptions\".* FROM \"user_subscriptions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userSubscriptionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in UserSubscriptionSlice")
	}

	*o = slice

	return nil
}

// UserSubscriptionExists checks if the UserSubscription row exists.
func UserSubscriptionExists(ctx context.Context, exec boil.ContextExecutor, subscriptionID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_subscriptions\" where \"subscription_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, subscriptionID)
	}
	row := exec.QueryRowContext(ctx, sql, subscriptionID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if user_subscriptions exists")
	}

	return exists, nil
}

// Exists checks if the UserSubscription row exists.
func (o *UserSubscription) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserSubscriptionExists(ctx, exec, o.SubscriptionID)
}

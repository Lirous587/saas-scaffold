// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CitusTable is an object representing the database table.
type CitusTable struct {
	TableName          null.String `boil:"table_name" json:"table_name,omitempty" toml:"table_name" yaml:"table_name,omitempty"`
	CitusTableType     null.String `boil:"citus_table_type" json:"citus_table_type,omitempty" toml:"citus_table_type" yaml:"citus_table_type,omitempty"`
	DistributionColumn null.String `boil:"distribution_column" json:"distribution_column,omitempty" toml:"distribution_column" yaml:"distribution_column,omitempty"`
	ColocationID       null.Int    `boil:"colocation_id" json:"colocation_id,omitempty" toml:"colocation_id" yaml:"colocation_id,omitempty"`
	TableSize          null.String `boil:"table_size" json:"table_size,omitempty" toml:"table_size" yaml:"table_size,omitempty"`
	ShardCount         null.Int64  `boil:"shard_count" json:"shard_count,omitempty" toml:"shard_count" yaml:"shard_count,omitempty"`
	TableOwner         null.String `boil:"table_owner" json:"table_owner,omitempty" toml:"table_owner" yaml:"table_owner,omitempty"`
	AccessMethod       null.String `boil:"access_method" json:"access_method,omitempty" toml:"access_method" yaml:"access_method,omitempty"`
}

var CitusTableColumns = struct {
	TableName          string
	CitusTableType     string
	DistributionColumn string
	ColocationID       string
	TableSize          string
	ShardCount         string
	TableOwner         string
	AccessMethod       string
}{
	TableName:          "table_name",
	CitusTableType:     "citus_table_type",
	DistributionColumn: "distribution_column",
	ColocationID:       "colocation_id",
	TableSize:          "table_size",
	ShardCount:         "shard_count",
	TableOwner:         "table_owner",
	AccessMethod:       "access_method",
}

var CitusTableTableColumns = struct {
	TableName          string
	CitusTableType     string
	DistributionColumn string
	ColocationID       string
	TableSize          string
	ShardCount         string
	TableOwner         string
	AccessMethod       string
}{
	TableName:          "citus_tables.table_name",
	CitusTableType:     "citus_tables.citus_table_type",
	DistributionColumn: "citus_tables.distribution_column",
	ColocationID:       "citus_tables.colocation_id",
	TableSize:          "citus_tables.table_size",
	ShardCount:         "citus_tables.shard_count",
	TableOwner:         "citus_tables.table_owner",
	AccessMethod:       "citus_tables.access_method",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CitusTableWhere = struct {
	TableName          whereHelpernull_String
	CitusTableType     whereHelpernull_String
	DistributionColumn whereHelpernull_String
	ColocationID       whereHelpernull_Int
	TableSize          whereHelpernull_String
	ShardCount         whereHelpernull_Int64
	TableOwner         whereHelpernull_String
	AccessMethod       whereHelpernull_String
}{
	TableName:          whereHelpernull_String{field: "\"citus_tables\".\"table_name\""},
	CitusTableType:     whereHelpernull_String{field: "\"citus_tables\".\"citus_table_type\""},
	DistributionColumn: whereHelpernull_String{field: "\"citus_tables\".\"distribution_column\""},
	ColocationID:       whereHelpernull_Int{field: "\"citus_tables\".\"colocation_id\""},
	TableSize:          whereHelpernull_String{field: "\"citus_tables\".\"table_size\""},
	ShardCount:         whereHelpernull_Int64{field: "\"citus_tables\".\"shard_count\""},
	TableOwner:         whereHelpernull_String{field: "\"citus_tables\".\"table_owner\""},
	AccessMethod:       whereHelpernull_String{field: "\"citus_tables\".\"access_method\""},
}

var (
	citusTableAllColumns            = []string{"table_name", "citus_table_type", "distribution_column", "colocation_id", "table_size", "shard_count", "table_owner", "access_method"}
	citusTableColumnsWithoutDefault = []string{}
	citusTableColumnsWithDefault    = []string{"table_name", "citus_table_type", "distribution_column", "colocation_id", "table_size", "shard_count", "table_owner", "access_method"}
	citusTablePrimaryKeyColumns     = []string{}
	citusTableGeneratedColumns      = []string{}
)

type (
	// CitusTableSlice is an alias for a slice of pointers to CitusTable.
	// This should almost always be used instead of []CitusTable.
	CitusTableSlice []*CitusTable
	// CitusTableHook is the signature for custom CitusTable hook methods
	CitusTableHook func(context.Context, boil.ContextExecutor, *CitusTable) error

	citusTableQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	citusTableType           = reflect.TypeOf(&CitusTable{})
	citusTableMapping        = queries.MakeStructMapping(citusTableType)
	citusTableInsertCacheMut sync.RWMutex
	citusTableInsertCache    = make(map[string]insertCache)
	citusTableUpdateCacheMut sync.RWMutex
	citusTableUpdateCache    = make(map[string]updateCache)
	citusTableUpsertCacheMut sync.RWMutex
	citusTableUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var citusTableAfterSelectMu sync.Mutex
var citusTableAfterSelectHooks []CitusTableHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CitusTable) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range citusTableAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCitusTableHook registers your hook function for all future operations.
func AddCitusTableHook(hookPoint boil.HookPoint, citusTableHook CitusTableHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		citusTableAfterSelectMu.Lock()
		citusTableAfterSelectHooks = append(citusTableAfterSelectHooks, citusTableHook)
		citusTableAfterSelectMu.Unlock()
	}
}

// One returns a single citusTable record from the query.
func (q citusTableQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CitusTable, error) {
	o := &CitusTable{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for citus_tables")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CitusTable records from the query.
func (q citusTableQuery) All(ctx context.Context, exec boil.ContextExecutor) (CitusTableSlice, error) {
	var o []*CitusTable

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to CitusTable slice")
	}

	if len(citusTableAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CitusTable records in the query.
func (q citusTableQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count citus_tables rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q citusTableQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if citus_tables exists")
	}

	return count > 0, nil
}

// CitusTables retrieves all the records using an executor.
func CitusTables(mods ...qm.QueryMod) citusTableQuery {
	mods = append(mods, qm.From("\"citus_tables\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"citus_tables\".*"})
	}

	return citusTableQuery{q}
}
